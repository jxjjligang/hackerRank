1. [Red Knight's Shortest Path]
   Straightforward, just use BFS to find the shortest path from all possible moves.
   
2. [Hackerland Radio Transmitters]
   The logic is clear, all below steps are in while loop, exit when houses array is empty:
   1. Order houses by their location value in ascending way.
   2. Find a transmitter (the far right house that can be reached by the first house location value plus transmitter range), then push that transmitter into array.
   3. Remove all the houses that will be covered by the transmitter found in step 2.

3. [Cut the Tree]
   First create a recursive solution, which is starightforward but will have 'max call stack exceeded' error 
   when the call stack is very deep.
   Therefore, I created a iterative solution which starts from leaf node, and goes up from leaf node;
   Reverse the BFS array (which saves the access order of tree nodes), will calculate all tree nodes subTotal
   value in one iteration, only by this way the performance will meet the requirement. 

4. [KnightL on a Chessboard]
   It's quite straightforward, just use BFS to search the least number of moves to reach destination location.   
   
5. [Gridland Metro]
   Key point: merge tracks when they overlap, including case one track's start position is another track's end position.
   The code from Editorial is easier to written and understood.
   
6. [Minimum Loss]   
   My solution is:
   (1). Create a new array in order to save all processed prices, initialize it to have the first day price
   (2). Then, for each day [current price], try to find the smallest price that is bigger than [current price], that value 
        will be used to update the [Minimum Loss], and merge [current price] into array created in step 1.
   But, my solution fails against 3 tests because of performance.
   Based on the idea from discussion, we only need to sort price array (remember to save the original index), then use nested iteration
   to update the [Minimum Loss], the original index comparison is critical because [bigger price index] must be less than [smaller price index].
   
      
   
   
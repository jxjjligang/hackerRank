1. [Minimum Penalty Path]
   (1). Use brute-force way to solve the problem.
   (2). use bit operator technique to solve the problem without timeout.
        The idea is narrow down the cost by starting the costLimit with 1023, 
		then check if its top digit (value is 2^9=512) can be zero or not. Mask off that digit from 
		all the edges' cost, then use DFS to see if end node can still be reached, if YES then that digit 
		can be 0 in the final cost, otherwise that digit must be kept 1. 
		Follow the same procedure until we reach the bottom digit (value is 2^0=1).
		
        here I use below condition:
      		    nodes = nodes.filter(o => (o.k & (~costLimit)) === 0).map(o => o.n);
		     instead of o.k <= costLimit
	    It's because we want all 0 bits of number costLimit were obeyed when filtering o.k.
		For example, 1011 (10-base 11), if use <= 11 to filter o.k, 
		we may choose 4,5,6 (the third digit is 1) and because of the OR calculation, that 1 digit 
		will be in the final result which is not we want.
		
2. [Breadth First Search]
   It's quite straightforward.

3. [Kruskal (MST) Really Special Subtree]    
   It's quite straightforward, disjoint-set technique helps to detect if a new edge will introduce cycle 
   into existing graph.
   
4. [Even Tree]   
   Not hard, and the logic from Editorial is much simpler than mine.
   
5. [Snakes and Ladders]   
   Use graph BFS idea to solve the problem, treat ladder / snake / normal position as a choice of next step, I only add [normal position] case once since it's forwarding.
   [From the Editorial], use visited array to remember positions have been visited is good to deal with edge case like 6 consecutive snakes.
   
6. [Crab Graphs]

7. [Prim's (MST) : Special Subtree]
   Must understand how to implement Prim's algorithm to calculate MST (Minimum Spanning Tree).
   
8. [Synchronous Shopping]
   Key point: 
   (1). Can be solved in a Dijkstra way, the item of array is combination of [node] and [fish already bought].
   (2). Use [Min Heap] data structure can significantly improve performance (from 299.0 seconds to 0.3 second), 
        the reason is might be effectively reduces the amount of backtracking.
	    (2.1) I implement an ordered array, which improve performance (from 299.0 seconds to 5.3 second), still not good enough to pass all the test cases.

9. [Roads in HackerLand]
   Key point:
   (1). Calculate MST (minimum spanning tree) from given graph.
   (2). Count the times of each edge that appears in [vertex to another vertex] shortest path;
        the final result is sum of [edge weight] * ([edge count]) * (N - [edge count])
	
   To improve performance:
   (1). Array.prototype.filter is time-consuming, use a Set instead will improve performance from 76 seconds to 2 seconds
   (2). To improve performance further for edge case, keep count of [disjoint set] to make it balanced will improve performance from 10.4 seconds to 1.4 second.
    
10.[Jack goes to Rapture]
   Key point: 
   (1). Use Prim's MST algorithm to explore all unvisited vertexes.
   (2). [Min Heap] data structure is used to quickly get the minimum running distance from queue
   (3). To improve performance further, I added a Map object within [Min Heap], this 
        map is used to save the [Vertex ID] -> [Index of intenal array], this improve performance when try to locate an object by its [Vertex ID], decrease running time from 2 seconds to 0.4 second.
		
11.[Rust & Murderer]
   Key point: (quite straightforward)
   (1). Starts from [start vertex], use BFS to find its all adjacent vertexes (not connected by city map road), save its visited history into a Map object; 
   continue until queue is empty.
   
12.[Jeanie's Route]  
   Based on the idea from [xdavidliu] in Discussion board.
   (1). Prune node which is not deliver target and degree is 1, use recursion to prune its parent continuously, define it as [Pruned Graph]
   (2). Find longest path from above graph by using BFS 2 times.
   (3). Final result is (2 * Sum of edges in [Pruned Graph] - longest path)
   To improve performance of pruneGraph function(from 131.3 seconds to 0.1 second): 
   Use last time found cutTable nodes to find their cutTable parent, initially is all nodes collection. 
   
13.[Clique]
   This is simply a implementation of formula from below link (Turan Graph).
   https://en.wikipedia.org/wiki/Tur%C3%A1n_graph   

13.[The Story of a Tree]   
     
   
   
		
   	
1. [The Power Sum]
   Step1: 1. Find all the valid [power number] and put them into array;
          2. Find the [maximum amount] (that power number can sum together and the final sum value <=X);
          3. From 1 to [maximum amount], during each iteration, find how many combinations amount to X;
             and sum all these values from each iteration.
             Recursion function must be written to reach every possible combination.
			 
2. [Stone Division, Revisited]
   Solve task in iterative way, starts from the smallest number in S array, then calculae bigger number which
   will use the result of the smaller number; this solution works efficiently both in time and space.  

3. [Password Cracker] written in C#
   Key points:
   1. Use DFS idea to iterate all possible matches, and save the match result (when one pass can be used to match from the current location, but eventually it can't match further).
   2. Remove passwords that can be produced by (1). repeat of another password, like 'aaa' can be removed when 'a' is also a password;
                                               (2). combination of any other 2 passwords, like 'abcd' can be removed when 'ab' and 'cd' are also passwords;
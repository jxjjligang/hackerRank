1. [Fibonacci Modified]
   Simple, use iteration to reach the target result; 
   In JavaScript, use BigInt for big number so as not to lose precision.

2. [Stock Maximize]
   My solution is push and pop, memorize the profit make and days, eventually accumulate to the final result.
   Editorial first introduces a naive solution - use 2 level iteration to find the profit that can be made for each day.
             Then, a simpler solution is to run the loop backward and keep track of the maximum stock price so far, time complexity is O(n**2). 
			 This way you can eliminate the inner for loop, time complexity is O(n).   
			 
3. [Abbreviation]	
   It's quite straightforward to construct a recursive solution.
   But hard to implement in a iterative way. But I still be able to implement it correctly on January 6, 2020. Four months before, I can only follow the idea of Editorial to write code. 

4. [Fibonacci Modified]
	Straightforward to implement.

5. [The Coin Change Problem] 
   My solution is try to memorize each combination detail (the type/number of coin that used), is not easy to implement and will consume memory exponentially.
   My solution only pass 6 cases, can't pass performance cases (take 47 seconds for case #3).
   
   However, the code from [rwan7727] works very fast to pass all cases.
   Also, the editorial gives a classic solution, consume O(n) memory space and O(m*n) time complexity.
   
6. [Lego Blocks]
   Key Points: 
    (1). Starts from the basic case (only 1 row whose width is w)
    (2). Then for n rows (without think unsafe cases), therefore g(n) = f(w)**n;
	(3). Think about every combination of safe(i) and unsafe(i-j), use DN to find all the values for h(1) until h(n-1)
	h[i] = g[i] - Sum of (h[j] * g[i-j]), j is [1, i-1]

7. [Bricks Game]
    Key point: Use [Pre Sum Arr] and [bottom up] idea, previous player is actuallly a different    
           way of showing first player. 
		   
8. [Xor and Sum]
    My solution: When the bits that b shifted is more than a length, then a^b = a + b;
             Based on that, I can deduce the result. 		

9. [The Maximum Subarray]			 
   Kadaneâ€™s Algorithm: implement it to get [Max SubArray]; [Max SubSequence] is simply sum of all non-negative element's value.
   
10.[The Longest Increasing Subsequence]
   The dynamic programming way (iteration way) is easy to understand and implement.
   But, it cant' pass performance test cases because its time complexity is O(n**2).  
   
   However, there is O(n*log(n)) algorithm, refer link: https://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/
   You must have the idea of [multiple active increasing list], and compare their end element with the incoming array element, then we will have 3 cases:
   (1). [incoming array element] < (all of them), a new [active increasing list] should be created.
   (2). [incoming array element] > (all of them), clone [longest active increasing list] as new list, append [incoming array element] to it.
   (3). [incoming array element] is between (all of them), then need find the [biggest end element] among lists whose [end element] is < [incoming array element], 
        clone that list and append [incoming array element], delete [active list] which has the same length as the new list just created.
   Eventually, return the longest [active list] length;		
   To improve performance, save all the [end elements] in a sorted array. 
   
11.[Mandragora Forest]   
   Key point:
   (1). Sort the input array in ascending order;
   (2). Iterate the sorted input, check each element of the array, decide the better way from (eat, battle).
   (3). The decision is based from compare (current health * current element) with (sum of left elements).
   The editorial made a clear discussion about how the logic and strategy was made.
   
   
12.[Knapsack]
   My solution is a little bit longer than the [editorial one], but time combination are both O(n^2).
      (1). Create a distinct array from input and sort the array in ascending order. 
      (2). Iterate every element of sorted array, and multiply them with count++, and save into [combination array]. 
      (3). Nest iterate [combination array], the outer iteration find the min element, then the inner iteration will add min with other elements left in [combination array], and update [combination array].
      Eventually, iterate backwards the [combination array], return the nearest number.

  The editorial solution is way simpler and straightforward, it shows me that the recursive way can start in a forward manner, not necessarily backward. 	  
  
13.[Coin on the Table]
   Key points:
   (1). Set the [min changes] of [Start Node] (0,0) to 0, put it into queue, shift queue to get the current node,
        then calculate current node's neighbour nodes [min changes] value, continue until queue is empty 
		(BFS is used here), discard node when the [spent time] value >= k.
   (2). Sort the queue before shift operation, sort firstly by the [spent time], then by the [min changes] value.
   (3). When visit current node's neighbour nodes (Left, Right, Up, Down), add neighbour node to queue only when 
        [min changes] of [current node] plus [possible change (1)] is smaller than existing value of neighbour node,
		OR there is no existing value for neighbour node.
		
   The editorial solution is more straightforward for understanding, it takes [row,column,time] 3 factors to deduce 
   future (time >= 1) [min changes] value based on previous values.
   
14.[The Longest Common Subsequence]
   My solution:
   (1). Calculate LCS value for 2-Dimensional array in iterative way;
   (2). Once step 1 done, find common sequences in a backward way.
   
15.[Nikita and the Game]   
   My solution:
   (1). Create BST tree, create node when middle value (based on [start,end] from input) does exist, then recursively
        create its left node based on (start, middle) and right node based on (middle, end).
   (2). Traverse above tree root to get its level.
   
16.[Red John is Back]  
   My solution is calculating the number of permutation, hard to implement and eventually only passed 2 cases.
   However, the Editorial one is quite simple, key points: 
   (1). Refer https://www.geeksforgeeks.org/tiling-problem/ about how to use [dynamic programming] for this type of problem
   (2). Sieve of Eratosthenes - calculate the number of primes less than or equal to M.
        Refer 

17.[Sherlock and Cost]
    Based on the idea from discussion, key point:
    (1). The previous best result is an array has 2 elements, index 0 means use 1 as A[i-1], index 1 means use B[i-1] as A[i-1].
    (2). The current best result will also be array has 2 elements, index 0, 1 has the same meaning as above; 
	     for index 0, we need the best result among appending it (value is 1) with [ prevResult[0], prevResult[1] ];
		 for index 1, we need the best result among appending it (value is B[i]) with [ prevResult[0], prevResult[1] ];

18.[Construct the Array]
   My solution is dp[i] = (k-1)**i- dp[i-1].
   Pay attention that when x is 1, the initial value of dp[1] is k-1, otherwise will be k-2.   
 
19.[Play with words]   
   Refer below link, it helps to solve this challenge.
   https://algorithms.tutorialhorizon.com/longest-palindromic-subsequence/
        
20.[Substring Diff]	
   Although solved the challenge by using the idea from Editorial, I still can't 
   understand its logic and how [dynamic programming] is related with it.
   Key points:
   (1). Create difference array, value of [i, j] = (str1[i] !== str2[j]) ? 1 : 0, then find the maximum possible value by expanding str1 and str2;
   (2). Keep 2 pointers (front and tail), the difference value of front and tail is the result;
   (3). There will be 2 sets of tailing pointers, but only one [front pointer], expand the search in 2 different ways: 
        [frontPtr][frontPtr + gap] and [frontPtr + gap][frontPtr], gap value is of [0, string length]; 
   
21.[Sam and substrings]
   Find a dynamic programming solution by myself, it runs very fast and passed all the test cases.
   Let's take 179, the we get 1x10**2 + (1+ 2x7)x10**1 + (1+ 2x7 + 3x9)x10**0   
   
22.[Interval Selection]   
   I can't solve it, then follow the idea from Discussion and solve it.
   Based on the idea from [Discussion] xDavidLiu
   Here's my greedy solution that passes all test cases:
	1. Sort by the [end time value]. 
	2. Since we are dealing with the [2 resource interval scheduling] problem, our greedy method is more complicated than the simple 
       "just keep grabbing the next compatible interval with the smallest end time" that we would use in the 1-resource problem. 
       Instead, for every interval, we need to decide which resource to give it to. 
       Here's the rule: we keep track the most recent interval placed in each of the two resources, and for a new interval, 
         we replace the interval of the resource with the latest compatible end time (if any). 
       Doing this allows the highest chance of some interval with a later end time being able to fit in the other resource, 
        since that other resource has an earlier end time, so is strictly more likely to make accommodations for some interval we will encounter later. 
       Hopefully this helps people, as I found most of the comments on this thread about the greedy solution utterly incomprehensible.
	   The sorting is O(N lg N) and the rest is O(N).  
   
23.[Summing Pieces]   
   Did not find the solution by myself, then read the Discussion board and use the idea =>
     A formula to get count for each element of original array, then sum all of them.
	 
24.[Counting Special Sub-Cubes]
   Dynamic Programming is used in following way:
   (1). High level (grid size of k+1) cube only cares about its 8 child sub-cube (grid size of k).
   (2). Start from bottom (grid size of 1) up, once high level cube (grid size of 2) is constructed, replace [previous sub-cube map] with [current cube map]
   (3). Map [cube element location] ( f(x,y,z) ) to [cube element value], this also helps above step 1 and 2.
   
   The Editorial shows a better/simpler coding solution.

25.[The Indian Job]
   My solution is a greedy type and pass only 6 cases.
   The Editorial gives an workable solution based on the constraint of input, is fast and simple (reverse iteration to find all possible SUM values).   
   
 	 
 
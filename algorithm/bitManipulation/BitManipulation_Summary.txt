1. [Counter game]  
   It's quite straightforward.
   But when read Editorial, I still learn many. When implement in JavaScript, found bit operation applies to 32 bit signed integer;
   Therefore, BigInt type must be used to achieve expected result.

2. [Cipher]
   Find a way that gradualy introduce the effect of bit(s) of original number, like
   step 1 only 1 bit of original number is introduced, so the original bit can be easily deduced;
   step 2 only introduce the bit found in step 1 and bit (after or before) it, so the next bit can be deduced also.
   step by step, we will deduce all the bits of the original number.
   
3. [The Great XOR]      
   It's straightforward to use right shift number and check each bit, attention the number range 
   in JavaScript does not satisfy the input range of this task, that's why BigInt is used.
   
4. [What's Next]
   (1). Analyze the binary pattern, convert the rightmost '01' to '10', and then try to move as many 1s to its right as possible.
   (2). Dealing with special case like 0 [represent the count value of 1 or 0] is left in the array.
   
5. [A or B]
   Initially, I use BigInt to solve the challenge, it works but failed for several performance tests.
   Then, based on the idea from disucssion, I treat input as string (transform hex string to binary string), 
   it works.
   
6. [AND Product]
   Key point: find the rule that 2&3&4=0, 4&5&6&7&8=0, this can help improve performance by log2(n)

7. [Xor-sequence] 
   Find the rule that 0^2^4^6 === 0, 1^3^5^7 === 0 and (even number)^(even number + 1) === 0
   
8. [Winning Lottery Ticket]
   key points:
   (1). Map string to number of digit 0 to 9, and count number frequency.
   (2). If 2 number OR result === 1023, then multiply their frequency and add up to [pairs] result
   (3). Special case for number === 1023, need subtract the duplicate pairs (from combination theory)
   
   
 
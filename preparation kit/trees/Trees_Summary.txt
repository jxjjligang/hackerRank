1. [Height of a Binary Tree]
   Use recursive method call to find answer

2. [Lowest Common Ancestor]
   Still use recursive method call to find answer.
   
3. [Is This a Binary Search Tree]
   Still use recursive idea to check each node's data within range (minValue, maxValue)

4. [Huffman Decoding]
   In while loop, read decoded string one by one and move node to the left (when read 0) 
   or to the right (while read 1), if leaf node is reached, add it to the final string and 
   reset node to root.
   
5. [Balanced Forest]   
	My solution is using brute-force, make 2 iterations, each of them iterate from edge start to edge end.
	Within inner iteration, create graphs without 2 edges (index of outer and inner iteration); then use disjointset to create rooted grphes;
    then create root2Count map and number2Count map, it can solve problem but is not performant.
	
	Below is based on discussion board.
	Definition: 
		Node:			root of sub-tree, it value is the sum of all of its nodes' value.
		Edge:			a line connects 2 points.
		Graph: 			collection of edges, represents connected nodes, no loop shall exists in it; 
		Graph Value:	the sum value of all its nodes' value.
		
	There are 3 cases:
	#1. Original graph can be split into 2 sub-graph, sub-graph has the same Graph Value.
	#2. Current node value is Node_Cost, there exists another node has Node_Cost value, then when Node_Cost > sum - 2*Node_Cost, we take 3*Node_Cost - sum as one answer.
	#3. Current node value is Node_Cost, there exists another node has (sum-Node_Cost)/2, there must be 3rd node has (sum-Node_Cost)/2; it's because plus all three sub-tress together
	    we get sum vale; in this case when (sum-Node_Cost)/2 > Node_Cost, we take (sum-Node_Cost)/2 - Node_Cost as one answer.
		

1. [Making Anagrams]
   Simple: create map (character to its count) for a and b, 
   find the count of common characters, then return (a.length + b.length - 2 *(common count))       
 
2. [Alternating Characters]
   Simple: iterate input string, compare current character with previous one.
   
3. [Sherlock and the Valid String]
   Simple: create map (character to its count) and 
           write code to compare difference between character count
		   
4. [Special String Again]
   Tips:
   (1.) Iterate string s one by one, save the character and its count (for the same repeating character) into array repeatingCharCount.
   (2.1) Iterate repeatingCharCount, for each element (of length K), add up K (k+1)/2 to answer. (e.g., 'aaa' has 6 substrings altogher)
   (2.2) Iterate repeatingCharCount, starts from the second element ends the second-last element, this is to compare the current one with its 
       previous/next element to see if those three matches 'aaaxaaaaaa' pattern, if matches adds up Math.min(prev.length, next.length), because 
       it means substring like axa, aaxaa, aaaxaaa, etc.		   
	   
5. [Common Child]
	Solve task with recursion is straightforward, but time complexity is 2 power n, which means impossible for real usage.
    
	Solve task with iterative method,
	(1.1) Create 2-dimension array s2Rows, s1 index used for column value, s2 index used for row value, the [rowIdx, columnIdx] element in the grid
	      represents the value of commonChild(s1.slice(0, columnIdx +1), s2.slice(0, rowIdx +1) )
	
    (1.2) Each element of s2Rows is a row, row index from 0 to S1_LENGTH
          step 1. initialize each row with its first element
          step 2. initialize each element of the first row
          step 3. iterate to compute value for element [rowIdx, columnIdx] in the grid, the outer iteration starts from row 1, the inner iteration starts from column 1
	   
Methodology:

Largest Rectangle: 
	2 ways that both use stack, but
	(1). During iteration of height array, push into stack with object {width: 1, value: height}, 
	      when incoming height >= top of stack, increment width by 1 for all existing stack objects and push incoming object;
          otherwise pop stack object until top stack object height >= incoming height, then push incoming object;
    keep updating largest rectangle by width*height when pop occurs and in the end
 
    (2). The idea is the same as the above, 2 points are different:
         #1 push statk the index of height array, when pop occurs, width = (incoming index - [value poped from stack] - 1) OR
		    incoming index value when stack is empty;
		 #2 push height value which is smaller than the minimum value of height array, this helps to pop stack in the end

	
Max Min Riddle:
    Essentially, the same solution for [Largest Rectangle] can be applied to it.
		
	
Poisonous Plants: 
    steps:
	1. Create stack and push an object with below property:
	   level: first element value of [plant poisonous level array, simply as plant array],
	   days:  0 (0 means never die, 1 means will die after day 1; 2 means will die after day 2, etc.
	   
	2. Iterate plant array from index 1 to the end, compare element value with statck top object level value:
	   If array element > stack top level value, then push a new object {level: array element value, days: 1};
	   Else pop up stack while array element <= stack top level value, there are 2 cases here:
	   #1 pop the stack to be empty, which means array element has the lowest poisonous level, will never die, push a new object {level: array element value, days: 0};
	   #2 can't pop the stack to be empty, remember the maxmimum days value of all those poped-pout stack objects, then 
	      push a new object {level: array element value, days: 1 + [maxmimum days value]};
		  Means after those will-die plants in the stack did die, the current plant will die.
	3. Update the maxDays (save the days that no plants will die after that) variable value.
	
Technique:
	Balanced Brackets: 
	    Crate stack and check each character:
        	if it is left bracket, then push into stack;
    		if it is right bracket check if there is match left bracket at the top of stack, pop out of stack if found.

	Queues: A Tale of Two Stacks:
	        Create 2 stack: enqueue_statck and dequeue_statck;
			For enqueue operation, push value into enqueue_statck, for dequeue operation, pops all the values from enqueue_statck into dequeue_statck, then pop dequeue_statck;
			For print operation, print dequeue_statck if it has value, else move values from enqueue_statck into dequeue_statck and print the top value of dequeue_statck.